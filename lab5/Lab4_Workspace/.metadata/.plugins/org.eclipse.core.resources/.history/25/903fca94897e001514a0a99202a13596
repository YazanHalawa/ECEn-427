/*
 * clock.c
 *
 *  Created on: Sep 11, 2015
 *      Author: superman
 */

#include "render.h"
#include "globals.h"
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include <time.h>
#include "xtmrctr.h"
#include "xac97_l.h"

#define TICKS_PER_SECOND 100		// There are 100 FIT ticks per seconds.
#define BUTTON_DEBOUNCE_WAIT 4		// Wait 4 FIT ticks (40ms) for a button debounce.
#define TANK_BORDER_RIGHT 600
#define TANK_BORDER_LEFT 10
#define TANK_FLASH_TICKS 20
#define SAUCER_FLASH_TICKS 30
#define SAUCER_TICKS_INIT 2000
#define SAUCER_TICKS_MIN 400
#define ALIEN_BULLET_TICKS_INIT 500
#define ALIEN_BULLET_INTERVAL_MAX 300
#define ALIEN_EXPLOSION_TICK_COUNT 15
#define FLASH_TICKS 4

#define VOL_DOWN 4
#define VOL_UP 16
#define MOVE_TANK_LEFT 8;
#define MOVE_TANK_RIGHT 2;
#define TANK_FIRE 1;

XTmrCtr Timer;
XTmrCtr *instPtr = &Timer;

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.


// --------- Sound Variables ---------//
extern int ufoSoundFrames;
extern int ufoSoundData[];

extern int explosionSoundFrames;
extern int explosionSoundData[];

extern int invaderkilledSoundFrames;
extern int invaderkilledSoundData[];

// Replace with saucer killed sound, modify global flag for it as well, and fix it in fifo interrupt handler
extern int fastinvader1SoundFrames;
extern int fastinvader1SoundData[];
extern int fastinvader2Frames;
extern int fastinvader2Data[];
extern int fastinvader3Frames;
extern int fastinvader3Data[];
extern int fastinvader4Frames;
extern int fastinvader4Data[];

extern int shootSoundFrames;
extern int shootSoundData[];


// The program uses the following counters.
// The counters are all initialized to 0.
static u32 fit_timer_count = 0;
static u32 debounce_timer_count = 0;
static u32 alien_explosion_count = 0;
static u32 alien_fire_count = 0;
static u32 saucer_count = 0;
static u32 currentButtonState = 0;
static u32 alienBulletTicks = ALIEN_BULLET_TICKS_INIT;
static u32 saucerTicks = SAUCER_TICKS_INIT; // wait 20 seconds before saucer comes
static bool currentFlashState = true;
static int flashNum = 0;
static int saucerFlashTime = 0;
static int tankFlashNum = 0;
static int TankFlashTime = 0;
static bool TankFlashState = true;
static bool volFlag = false;


void clearAllSounds(){
	setExplosionFlag(0);
	setMarchingFlag(0);
	setMarchingFlag2(0);
	setMarchingFlag3(0);
	setMarchingFlag4(0);
	setSaucerFlag(0);
	setInvaderKilledFlag(0);
	setPingFlag(0);
}


int* pointInArray;
void fifo_writer(int* array, int frameNums){
	static int indexInArray = 0;
	if (indexInArray == 0)
		pointInArray = array;
	if (indexInArray + 128 >= frameNums){
		int diff = indexInArray + 128 - frameNums;
		XAC97_PlayAudio(XPAR_AXI_AC97_0_BASEADDR, pointInArray, pointInArray+diff);
		pointInArray = array;
		indexInArray = 0;
		clearAllSounds();
		XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR);
		XAC97_mSetControl(XPAR_AXI_AC97_0_BASEADDR, AC97_ENABLE_IN_FIFO_INTERRUPT);
	} else {
		XAC97_PlayAudio(XPAR_AXI_AC97_0_BASEADDR, pointInArray, pointInArray+128);
		//clearAllSounds();
		//XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR);
		pointInArray += 128;
		indexInArray += 128;
	}
}


void resetAlienExplosionCount() {
	alien_explosion_count = 0;
}

void alienBulletsCreate() {
	alien_fire_count++;
	if (alien_fire_count >= alienBulletTicks) {
		alien_fire_count = 0;
		alienBulletTicks = rand()%ALIEN_BULLET_INTERVAL_MAX;
		alienFire();
	}
}

void saucerUpdate() {
	saucer_count++;
	if (getSaucerDirection() == SAUCER_INACTIVE && saucer_count >= saucerTicks) {
		saucer_count = 0;
		saucerTicks = rand()%SAUCER_TICKS_INIT;
		if (saucerTicks < SAUCER_TICKS_MIN)
			saucerTicks = SAUCER_TICKS_MIN;
		int direction = (rand()%2) ? SACUER_DIRECTION_RIGHT : SAUCER_DIRECTION_LEFT;
		if (direction == SACUER_DIRECTION_RIGHT){
			point_t saucerStart;
			saucerStart.x = SAUCER_LEFT_INIT_Y;
			saucerStart.y = SAUCER_INIT_X;
			setSaucerPos(saucerStart);
		}
		else{
			point_t saucerStart;
			saucerStart.x = SAUCER_RIGHT_INIT_Y;
			saucerStart.y = SAUCER_INIT_X;
			setSaucerPos(saucerStart);
		}
		setSaucerDirection(direction);
	}
	if (getSaucerDirection() != SAUCER_INACTIVE && saucer_count % 2 == SAUCER_INACTIVE) {
		saucer_count = 0;
		// erase
		drawSaucer(true);
		// update location and draw new Saucer
		point_t newSaucerPos;
		newSaucerPos.y = getSaucerPos().y;
		if (getSaucerDirection() == SACUER_DIRECTION_RIGHT)
			newSaucerPos.x = getSaucerPos().x + SAUCER_INCREMENT;
		else
			newSaucerPos.x = getSaucerPos().x - SAUCER_INCREMENT;
		if (newSaucerPos.x > SAUCER_RIGHT_INIT_Y || newSaucerPos.x < SAUCER_LEFT_INIT_Y) {
			setSaucerDirection(SAUCER_INACTIVE);
			saucer_count = 0;
		} else {
			setSaucerPos(newSaucerPos);
		}
		drawSaucer(false);
		setSaucerFlag(1);
	}
}

void checkExplosion() {
	if (getDeadAlien() != DEAD && alien_explosion_count >= ALIEN_EXPLOSION_TICK_COUNT) {
		setInvaderKilledFlag(1);
		eraseAlienSpot();
		setDeadAlien(DEAD);
		updateScore();
		alien_explosion_count = 0;
	}
}

void debounceButtons() {

	int rightVal = MOVE_TANK_RIGHT;
	int leftVal = MOVE_TANK_LEFT;
	int fire = TANK_FIRE;

	if (currentButtonState == 0) {
		volFlag = false;
	}

	// Control volume of sounds in the game
	if (debounce_timer_count >= BUTTON_DEBOUNCE_WAIT && !volFlag){
		if (currentButtonState == VOL_UP){
			setVolLevel(getVolLevel() + 1);
		}
		else if (currentButtonState == VOL_DOWN){
			setVolLevel(getVolLevel() - 1);
		}
		volFlag = true;
		debounce_timer_count = 0;												// Reset the debouncing timer
	}

	// This waits the given amount of time, so that button presses can be properly debounced.
	if (debounce_timer_count >= BUTTON_DEBOUNCE_WAIT && !isTankHit()) {
		if ((currentButtonState == leftVal || currentButtonState == leftVal + fire) && getTankPositionGlobal() >= TANK_BORDER_LEFT){
			setTankPositionGlobal(getTankPositionGlobal() - TANK_INCREMENT);
			drawTank(false, 0, 0);
		}
		else if ((currentButtonState == rightVal || currentButtonState == rightVal + fire) && getTankPositionGlobal() <= TANK_BORDER_RIGHT){
			setTankPositionGlobal(getTankPositionGlobal() + TANK_INCREMENT);
			drawTank(false, 0, 0);
		}
		if (!getBulletStatus() && (currentButtonState == fire || currentButtonState == rightVal + fire || currentButtonState == leftVal + fire)){
			setBulletStatus(true);												// Let globals know that there's a tank bullet in the air
			point_t bullet;														// Create a new bullet for the tank
			bullet.x = getTankPositionGlobal() + (TANK_WIDTH/SCALING_FACTOR);	// Assign the bullet's x-val to the middle of the tank
			bullet.y = TANK_ROW_START;											// Assign the bullets' y-val to the top of the tank
			setTankBulletPosition(bullet);										// Set the bullet in globals
			drawTankBullet(false);												// Draw this new bullet
			setPingFlag(1);
		}
		debounce_timer_count = 0;												// Reset the debouncing timer
	}

}

void updateAllBullets() {
	if (getBulletStatus()) {
		point_t tank_bullet;
		tank_bullet.x = getTankBulletPosition().x;
		tank_bullet.y = getTankBulletPosition().y-BULLET_INCREMENT;
		setTankBulletPosition(tank_bullet);
		drawTankBullet(true);
		checkHits();
	}
	updateBullets();
}

void checkGameOver() {
	if ((getAlienBlockPosition().y + ((getBottomRow()+1)*TOTAL_VERTICAL_DISTANCE_BETWEEN_ALIENS)) >= BUNKER_ROW_STOP) {
		setEndOfGame(true);
	}
}

void updateAlienBlock() {
	int stage;
	// This waits a full second in FIT ticks, and updates cumulative seconds if there are no button presses.
	if (fit_timer_count >= getAlienTicks()) {
		drawAliens();
		stage = getMarchingStage();
		switch(stage) {
		case (1):
				//xil_printf("case 1\n\r");
				setMarchingFlag(1);
				break;
		case (2):
				//xil_printf("case 2\n\r");
				setMarchingFlag2(1);
				break;
		case (3):
				//xil_printf("case 3\n\r");
				setMarchingFlag3(1);
				break;
		case (4):
				//xil_printf("case 4\n\r");
				setMarchingFlag4(1);
				break;
		default:
				xil_printf("default\n\r");
				//setMarchingFlag(1);
				break;
		}
		//setMarchingFlag(1);

		//fifo_writer(fastinvader1SoundData, fastinvader1SoundRate, fastinvader1SoundFrames);
		fit_timer_count = 0;			// Reset the counter.
	}
}

void updateSaucerFlashing() {
	if (getSaucerBonus() != 0 && saucerFlashTime >= SAUCER_FLASH_TICKS && flashNum != FLASH_TICKS){
		flashNum++;
		saucerFlashTime = 0;
		currentFlashState = ! currentFlashState;
		displaySaucerBonus(currentFlashState);
	}
	if (flashNum == FLASH_TICKS){
		flashNum = 0;
		currentFlashState = true;
		displaySaucerBonus(currentFlashState);
		setSaucerBonus(0);
	}
	saucerFlashTime++;
}

void updateTankFlashing() {
	if (isTankHit() && TankFlashTime >= TANK_FLASH_TICKS && tankFlashNum != FLASH_TICKS){
		setExplosionFlag(1);
		tankFlashNum++;
		TankFlashTime = 0;
		TankFlashState = !TankFlashState;
		if (tankFlashNum <= 1)
			flashTank(TankFlashState, true);
		else
			flashTank(TankFlashState, false);
	}
	if (isTankHit() && tankFlashNum == FLASH_TICKS){
		tankFlashNum = 0;
		TankFlashState = true;
		flashTank(TankFlashState, false);
		setTankHit(false);
		setLives(getLives()-1);
		// Take out one of the lives
		int startRow = 5;
		int startCol = 490 + (getLives())*40;
		drawTank(true, startRow , startCol);
		// Check if game over
		if (getLives() == 0) {
			setEndOfGame(true);
		} else {
			setTankPositionGlobal(20); // Reset Tank
			drawTank(false, 0, 0);
		}
	}
	TankFlashTime++;
}

void resetDebouncer() {
	// If there are no button presses, do not try to debounce a button.
	// This means the debounce_timer_count needs to be reset.
	if (!currentButtonState) {
		debounce_timer_count = 0;
	}
}

// This is invoked in response to a timer interrupt.
// This code is used for everything that needs to
// use precise timing. It is split into many function
// for readability.
void timer_interrupt_handler() {

	// Increment the following counters:
	fit_timer_count++;
	debounce_timer_count++;
	alien_explosion_count++;

	checkGameOver();			// Check to see if the aliens have reached the bottom.
	alienBulletsCreate();		// Create a new alien bullet, if possible.
	saucerUpdate();				// Move the saucer.
	debounceButtons();			// Debounce the push buttons, and then move the tank and/or fire.
	checkExplosion();			// Handle alien explosions.
	updateAllBullets();			// Update both the tank and alien bullets.
	updateAlienBlock();			// Update the alien block position.
	updateSaucerFlashing();		// Update if the saucer is hit and should be flashing.
	updateTankFlashing();		// Update if the tank is hit and should be flashing.
	resetDebouncer();			// Reset the debouncer timer if no buttons are pressed.
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
	// Clear the GPIO interrupt.
	XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
	// You need to do something here.
	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
	XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
	// Because there is a change in the button state, the button counters need to be reinitialized.
	debounce_timer_count = 0;
}


// FIFO Interrupt Handler which runs the sound through the XAC 97 sound chip
void fifo_interrupt_handler(){
	//XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR);
	if (getSaucerFlag()){
		fifo_writer(ufoSoundData, ufoSoundFrames);
	}
	else if (getExplosionFlag()){
		fifo_writer(explosionSoundData, explosionSoundFrames);
	}
	else if (getInvaderKilledFlag()){
		fifo_writer(invaderkilledSoundData, invaderkilledSoundFrames);
	}
	else if (getPingFlag()){
		fifo_writer(shootSoundData, shootSoundFrames);
	}
	else if (getMarchingFlag()){
		//xil_printf("writing 1\n\r");
		fifo_writer(fastinvader1SoundData, fastinvader1SoundFrames);
	}
	else if (getMarchingFlag2()){
		//xil_printf("writing 2\n\r");
		fifo_writer(fastinvader2Data, fastinvader2Frames);
	}
	else if (getMarchingFlag3()){
		//xil_printf("writing 3\n\r");
		fifo_writer(fastinvader3Data, fastinvader3Frames);
	}
	else if (getMarchingFlag4()){
		//xil_printf("writing 4\n\r");
		fifo_writer(fastinvader4Data, fastinvader4Frames);
	}
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler();
	}

	// Check the FIFO-IN in the XAC97
	if (intc_status & XPAR_AXI_AC97_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_AC97_0_INTERRUPT_MASK);
		fifo_interrupt_handler();
	}
}

int interruptManager (unsigned int * framePointer0) {
	init_platform();
	// Initialize the GPIO peripherals.
	int success;

	// Used for CPU utilization. Uncomment if desired
	// XTmrCtr_Initialize(instPtr, 0);

	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	// Reset the XAC97 Chip
	XAC97_HardReset(XPAR_AXI_AC97_0_BASEADDR);
	XAC97_mSetControl(XPAR_AXI_AC97_0_BASEADDR, AC97_ENABLE_IN_FIFO_INTERRUPT);
	setVolLevel(AC97_VOL_MAX);
	clearAllSounds();

	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK | XPAR_AXI_AC97_0_INTERRUPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();

	// Uncomment for CPU utilization stats
	/*XTmrCtr Timer;
	XTmrCtr *instPtr = &Timer;
	XTmrCtr_Initialize(instPtr, 0);
	XTmrCtr_Start(instPtr, 0);*/
	while(!isEndOfGame()); // Program never ends.

	// Uncomment for CPU utilization stats
	/*XTmrCtr_Stop(instPtr, 0);
	int val = (int) XTmrCtr_GetValue(instPtr, 0);
	xil_printf("%d\n\r", val);*/
	clearAllSounds();
	XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR);
	drawGameOver();
	cleanup_platform();

	return 0;
}
