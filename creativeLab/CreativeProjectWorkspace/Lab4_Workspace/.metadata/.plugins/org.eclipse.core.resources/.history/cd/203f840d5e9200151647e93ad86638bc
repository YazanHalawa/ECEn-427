/*
 * render.c
 *
 *  Created on: Sep 26, 2015
 *      Author: superman
 */
#include "render.h"
#include "globals.h"
#include "bitmaps.h"
#include "interrupts.h"

#define INITIAL_TANK_POSITION 20;

static unsigned int old_position = INITIAL_TANK_POSITION;
static const int pixelWidth = PIXEL_WIDTH;
static const int pixelHeight = PIXEL_HEIGHT;
static const int scalingFactor = SCALING_FACTOR;
static const int alienWidth = ALIEN_PIXEL_WIDTH;
static const int alienHeight = ALIEN_PIXEL_HEIGHT;
static const int totalAlienWidth = TOTAL_HORIZONTAL_DISTANCE_BETWEEN_ALIENS;
static const int totalAlienHeight = TOTAL_VERTICAL_DISTANCE_BETWEEN_ALIENS;
static const int bulletWidth = BULLET_PIXEL_WIDTH;
static const int bulletHeight = BULLET_PIXEL_HEIGHT;
static bool aliensStillMovingHorizontally = true;
static unsigned int * framePointer0;
static const int saucerWidth = SAUCER_PIXEL_WIDTH;
static const int saucerHeight = SAUCER_PIXEL_HEIGHT;
static const int green_hex = GREEN;
static const int white_hex = WHITE;
static const int black_hex = BLACK;


// Draws the tank on the screen.
void drawTank(bool staticTank, int startRow, int startCol) {
	int row = 0;
	int col = 0;
	int tankHeight = TANK_HEIGHT;
	int tankWidth = TANK_WIDTH;
	int tankStart = TANK_ROW_START;
	int tankStop = TANK_ROW_STOP;

	if (staticTank){
		for (row = startRow; row < startRow + tankHeight; row++) {
			for (col = startCol; col < startCol + tankWidth; col++) {
				if (!isInit() || (tank_15x8[(row - startRow)/scalingFactor] & (1<<((col-startCol)/scalingFactor))) == 0) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = GREEN;
				}
			}
		}
	}
	else{
		int current_position = getTankPositionGlobal();

		// First we need to erase the old tank
		for (row = tankStart; row < tankStop; row++) {
			for (col = old_position; col < old_position + tankWidth; col++) {
				framePointer0[row*pixelWidth + col] = BLACK;
			}
		}
		// Now draw the tank in its new position
		for (row = tankStart; row < tankStop; row++) {
			for (col = current_position; col < current_position + tankWidth; col++) {
				if ((tank_15x8[(row - tankStart)/scalingFactor] & (1<<((col-current_position)/scalingFactor))) == 0) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = GREEN;
				}
			}
		}
		// Update the position of the tank in memory
		old_position = current_position;
	}
}

void clearTank() {
	int row = 0;
	int col = 0;
	int tankWidth = TANK_WIDTH;
	int tankStart = TANK_ROW_START;
	int tankStop = TANK_ROW_STOP;
	int current_position = getTankPositionGlobal();
	for (row = tankStart; row < tankStop+1; row++) {
		for (col = current_position; col < current_position + tankWidth; col++) {
			framePointer0[row*pixelWidth + col] = BLACK;
		}
	}
}

// Erodes part of a given bunker in a given location.
void destroyPartOfBunker(const int array[], int BunkerNumber, int segmentNumRow, int segmentCol){
	int row = 0;
	int col = 0;
	int incrementRow = segmentNumRow*BUNKER_SQUARE_LENGTH;
	int incrementCol = BunkerNumber*BUNKER_QUADRANT_WIDTH + segmentCol*BUNKER_SQUARE_LENGTH;
	int screenColor = BLACK;
	// Now draw the tank in its new position
	for (row = 359 + incrementRow; row < BUNKER_ROW_START + incrementRow + BUNKER_SQUARE_LENGTH; row++) {
		for (col = BUNKER_COL_START + incrementCol; col < BUNKER_COL_START + incrementCol + BUNKER_SQUARE_LENGTH; col++) {
			if (framePointer0[(row)*pixelWidth + col] != screenColor && (array[(row - BUNKER_ROW_START - incrementRow)/scalingFactor] & (1<<((col-BUNKER_COL_START - incrementCol)/scalingFactor))) != 0) {
				framePointer0[(row)*pixelWidth + col] = GREEN;
			} else {
				framePointer0[(row)*pixelWidth + col] = BLACK;
			}
		}
	}
}

// Called when eroding a bunker by a given degree
void erodeBunker(int erosionState, int BunkerNumber, int segmentNumRow, int segmentCol){
	int segmentNum = (BunkerNumber*BUNKER_SQUARE_LENGTH) + (segmentNumRow) * 4 + segmentCol;
	if (erosionState == -1){
		setErosionDegree(segmentNum, 3);
		destroyPartOfBunker(bunkerDamage3_6x6, BunkerNumber, segmentNumRow, segmentCol);
	}
	else if (erosionState == 3){
		setErosionDegree(segmentNum, 2);
		destroyPartOfBunker(bunkerDamage2_6x6, BunkerNumber, segmentNumRow, segmentCol);
	}
	else if (erosionState == 2){
		setErosionDegree(segmentNum, 1);
		destroyPartOfBunker(bunkerDamage1_6x6, BunkerNumber, segmentNumRow, segmentCol);
	}

	else if (erosionState == 1){
		setErosionDegree(segmentNum, 0);
		destroyPartOfBunker(bunkerDamage0_6x6, BunkerNumber, segmentNumRow, segmentCol);
	}

}

// Draw a bunker on the screen.
void drawBunker(int BunkerNumber){
	int row = 0;
	int col = 0;
	int incrementY = BunkerNumber*BUNKER_QUADRANT_WIDTH;
	// Now draw the tank in its new position
	for (row = BUNKER_ROW_START; row < BUNKER_ROW_STOP; row++) {
		for (col = BUNKER_COL_START + incrementY; col < BUNKER_COL_STOP + incrementY; col++) {
			if ((bunker_24x18[(row - BUNKER_ROW_START)/scalingFactor] & (1<<((col-BUNKER_COL_START + incrementY)/scalingFactor))) == 0) {
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = GREEN;
			}
		}
	}
}

// Draw all four bunkers on the screen.
void drawBunkers() {
	int i = 0;
	for (i = 0; i < BUNKER_COUNT; i++){
		drawBunker(i);
	}

}

void drawSaucer(bool reset) {
	int row = 0;
	int col = 0;
	int start_x = getSaucerPos().x;
	int start_y = getSaucerPos().y;
	for (row = start_y; row < start_y+saucerHeight; row++) {
		for (col = start_x; col < start_x+saucerWidth; col++) {
			if (reset || (saucer_16x7[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor))) == 0 || (col <= 0) || col >= SAUCER_RIGHT_INIT_Y) {
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = RED;
			}
		}
	}
}

#define ROW_0_START 0
#define ROW_1_START 11
#define ROW_2_START 22
#define ROW_3_START 33
#define ROW_4_START 44
#define ROW_5_START 55 // Note: Row 5 doesn't actually exist


// Draw a top row alien
void drawTopAlien(unsigned int start_x, unsigned int start_y, bool reset) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_top_out_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}

// Draw a middle row alien
void drawMiddleAlien(unsigned int start_x, unsigned int start_y) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_middle_out_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}

// Draw a bottom row alien
void drawBottomAlien(unsigned int start_x, unsigned int start_y) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_bottom_out_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}

// Draw all the top row aliens
void drawTopAliens(bool reset){
	int alienNumber = 0;
	for (alienNumber=ROW_0_START; alienNumber<ROW_1_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + (alienNumber*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y;
		drawTopAlien(alien_start_x, alien_start_y, reset);
	}
}

// Draw all the middle row aliens
void drawMiddleAliens(bool reset) {
	int alienNumber = 0;
	for (alienNumber=ROW_1_START; alienNumber<ROW_2_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-11)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + totalAlienHeight;
		drawMiddleAlien(alien_start_x, alien_start_y);
	}

	for (alienNumber=ROW_2_START; alienNumber<ROW_3_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-ROW_2_START)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 48;
		drawMiddleAlien(alien_start_x, alien_start_y);
	}
}

// Draw all the bottom row aliens
void drawBottomAliens(bool reset) {
	int alienNumber = 0;
	for (alienNumber=ROW_3_START; alienNumber<ROW_4_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-ROW_3_START)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 72;
		drawBottomAlien(alien_start_x, alien_start_y);
	}
	for (alienNumber=ROW_4_START; alienNumber<ROW_5_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-44)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 96;
		drawBottomAlien(alien_start_x, alien_start_y);
	}
}


// Draw a top row alien with legs in
void drawTopAlien_in(unsigned int start_x, unsigned int start_y) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_top_in_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}

// Draw a middle row alien with legs in
void drawMiddleAlien_in(unsigned int start_x, unsigned int start_y) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_middle_in_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}

// Draw a bottom row alien with legs in
void drawBottomAlien_in(unsigned int start_x, unsigned int start_y) {
	int row = 0;
	int col = 0;
	for (row = start_y; row < start_y+alienHeight; row++) {
		for (col = start_x; col < start_x+alienWidth; col++) {
			const int bitmapVal = (alien_bottom_in_16x12[(row - start_y)/scalingFactor] & (1<<((col-start_x)/scalingFactor)));
			if ((bitmapVal == 0) && (framePointer0[(row)*pixelWidth + col] == green_hex)) {
				framePointer0[row*pixelWidth + col] = GREEN;
			} else if (bitmapVal == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = WHITE;
			}
		}
	}
}



// Draw all top row aliens with legs in
void drawTopAliens_in(bool reset){
	int alienNumber = 0;
	for (alienNumber=ROW_0_START; alienNumber<ROW_1_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + (alienNumber*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y;
		drawTopAlien_in(alien_start_x, alien_start_y);
	}
}

// Draw all middle row aliens with legs in
void drawMiddleAliens_in(bool reset) {
	int alienNumber = 0;
	for (alienNumber=ROW_1_START; alienNumber<ROW_2_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-11)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + totalAlienHeight;
		drawMiddleAlien_in(alien_start_x, alien_start_y);
	}

	for (alienNumber=ROW_2_START; alienNumber<ROW_3_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-ROW_2_START)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 48;
		drawMiddleAlien_in(alien_start_x, alien_start_y);
	}
}

// Draw all bottom row aliens with legs in
void drawBottomAliens_in(bool reset) {
	int alienNumber = 0;
	for (alienNumber=ROW_3_START; alienNumber<ROW_4_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-33)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 72;
		drawBottomAlien_in(alien_start_x, alien_start_y);
	}
	for (alienNumber=ROW_4_START; alienNumber<ROW_5_START; alienNumber++) {
		if (!getAliveAlien(alienNumber)) {
			continue;
		}
		int alien_start_x = getAlienBlockPosition().x + ((alienNumber-ROW_4_START)*totalAlienWidth);
		int alien_start_y = getAlienBlockPosition().y + 96;
		drawBottomAlien_in(alien_start_x, alien_start_y);
	}
}

void eraseAlienSpot() {
	int row;
	int col;
	int startRow = getOldAlienPos().y;
	int startCol = getOldAlienPos().x;

	for (row = startRow; row < startRow+totalAlienHeight; row++) {
		for (col = startCol; col < startCol+alienWidth+2; col++) {
			framePointer0[row*pixelWidth + col] = BLACK;
		}
	}
}

// Draw all living aliens on the screen.
void drawAliens() {
	int farthestLeftAlienPosition = getAlienBlockPosition().x + ((getFarthestLeftAlienColumn()) * totalAlienWidth);
	int farthestRightAlienPosition = getAlienBlockPosition().x + ((getFarthestRightAlienColumn() + 1) * totalAlienWidth);
	if ((farthestLeftAlienPosition < ALIEN_BLOCK_LEFT_BORDER || farthestRightAlienPosition > ALIEN_BLOCK_RIGHT_BORDER) && aliensStillMovingHorizontally) {
		setAlienBlockPosition(getAlienBlockPosition().x, getAlienBlockPosition().y + ALIEN_BLOCK_INCREMENT);
		switchAliensDirection();
		aliensStillMovingHorizontally = false;
	} else {
		if (getAliensDirection()) {
			setAlienBlockPosition(getAlienBlockPosition().x + ALIEN_BLOCK_INCREMENT, getAlienBlockPosition().y);
		} else {
			setAlienBlockPosition(getAlienBlockPosition().x - ALIEN_BLOCK_INCREMENT, getAlienBlockPosition().y);
		}
		aliensStillMovingHorizontally = true;
	}
	if (getLegsOut()) {
		drawTopAliens(false);
		drawMiddleAliens(false);
		drawBottomAliens(false);
	} else {
		drawTopAliens_in(false);
		drawMiddleAliens_in(false);
		drawBottomAliens_in(false);
	}
	switchLegsOut();
}

// Draw a T_type bullet at stage 0
void drawTBullet0(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((t_bullet_3x5_0[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a T_type bullet at stage 1
void drawTBullet1(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((t_bullet_3x5_1[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a T_type bullet at stage 2
void drawTBullet2(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((t_bullet_3x5_2[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a S_type bullet at stage 0
void drawSBullet0(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((s_bullet_3x5_0[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a S_type bullet at stage 1
void drawSBullet1(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((s_bullet_3x5_1[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a S_type bullet at stage 2
void drawSBullet2(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((s_bullet_3x5_2[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw a S_type bullet at stage 3
void drawSBullet3(bullet b, bool reset) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if ((s_bullet_3x5_3[(row - rowStart)/scalingFactor] & (1<<((col-colStart)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			}
			else{
				if (reset) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = BULLET_WHITE;
				}
			}
		}
	}
}

// Draw all alien bullets
void drawBullets() {
	int i;
	for (i=0; i<BULLET_COUNT; i++) {
		if (getAlienBullet(i).is_in_flight) {
			if (getAlienBullet(i).type == T_type) {
				switch(getAlienBullet(i).bullet_stage) {
				case (BULLET_STAGE_0):
					drawTBullet0(getAlienBullet(i), false);
					break;
				case (BULLET_STAGE_1):
					drawTBullet1(getAlienBullet(i), false);
					break;
				case (BULLET_STAGE_2):
					drawTBullet2(getAlienBullet(i), false);
					break;
				default:
					break;
				}
			} else {
				switch(getAlienBullet(i).bullet_stage) {
				case (BULLET_STAGE_0):
					drawSBullet0(getAlienBullet(i), false);
					break;
				case (BULLET_STAGE_1):
					drawSBullet1(getAlienBullet(i), false);
					break;
				case (BULLET_STAGE_2):
					drawSBullet2(getAlienBullet(i), false);
					break;
				case (BULLET_STAGE_3):
					drawSBullet3(getAlienBullet(i), false);
					break;
				default:
					break;
				}
			}
		}
	}
}

// Create a new bullet if there are less than 4 alien bullets on the screen,
// then display the new array of bullets on the screen.
void alienFire() {
	addAlienBullet();
	drawBullets(framePointer0);
}

int findSegNumRow(int bulletY, bool addInc){
	int incr = 0;
	if (addInc)
		incr = 9;
	xil_printf("\tbullet_y: %d, range: %d\n\r", bulletY, BUNKER_ROW_START + BUNKER_SQUARE_LENGTH);
	if (bulletY < BUNKER_ROW_START + BUNKER_SQUARE_LENGTH){
		return 0;
	} else if (bulletY < BUNKER_ROW_START + BUNKER_SQUARE_LENGTH + BUNKER_SQUARE_LENGTH){
		return 1;
	} else {
		return 2;
	}
}
int findSegNumCol(int bulletX, int midBunkerPos){
	if (bulletX <= midBunkerPos){
		if (bulletX <= midBunkerPos - BUNKER_SQUARE_LENGTH){
			return BUNKER_0;
		} else {
			return BUNKER_1;
		}
	} else {
		if (bulletX <= midBunkerPos + BUNKER_SQUARE_LENGTH){
			return BUNKER_2;
		}else{
			return BUNKER_3;
		}
	}
}

void clearAlienBullet(bool hit, bullet b) {
	int rowStart = b.point.y;
	int colStart = b.point.x;
	int row, col;
	for (row = rowStart; row < rowStart + bulletHeight; row++){
		for (col = colStart; col < colStart + bulletWidth; col++){
			if (hit){
				framePointer0[row*pixelWidth + col] = GREEN;
			}
			else{
				framePointer0[row*pixelWidth + col] = BLACK;
			}
		}
	}
}

bool checkAlienBulletHits(int i) {
	bullet b = getAlienBullet(i);
	bool hit = false;
	int loop;
	for(loop = -4; loop <= 4; loop++) {
		if (framePointer0[((b.point.y+BULLET_PIXEL_HEIGHT) * pixelWidth) + b.point.x + loop] == green_hex) {
			hit = true;
		}
	}

	if (hit) {	// alien bullet has hit something green
		// the Tank has been hit
		if (b.point.y >= (TANK_ROW_START - BULLET_PIXEL_HEIGHT)) {
			disableBullet(i);
			setTankHit(true);
			return false;
		}
		// a bunker has been hit
		else {
			int segmentNumRow, segmentNumCol;
			int bunkerNum;
			int bulletX = getAlienBullet(i).point.x;
			int bulletY = getAlienBullet(i).point.y;
			// Figure out which bunker was hit by using the bullet's position
			if (bulletX < 160){
				xil_printf("hit bunker_0\n\r");
				bunkerNum = BUNKER_0;
				segmentNumCol = findSegNumCol(bulletX, 80);
				segmentNumRow = findSegNumRow(bulletY, false);
			}
			else if (bulletX < 320){
				xil_printf("hit bunker_1\n\r");
				bunkerNum = BUNKER_1;
				segmentNumCol = findSegNumCol(bulletX, 240);
				segmentNumRow = findSegNumRow(bulletY, false);
			}
			else if (bulletX < 480){
				xil_printf("hit bunker_2\n\r");
				bunkerNum = BUNKER_2;
				segmentNumCol = findSegNumCol(bulletX, 400);
				segmentNumRow = findSegNumRow(bulletY, false);
			}
			else{
				xil_printf("hit bunker_3\n\r");
				bunkerNum = BUNKER_3;
				segmentNumCol = findSegNumCol(bulletX, 560);
				segmentNumRow = findSegNumRow(bulletY, false);
			}

			xil_printf("\tsegNumCol: %d, segNumRow = %d\r\n", segmentNumCol, segmentNumRow);
			// Figure out which segment within the bunker was and get its erosion state
			int segmentNum = (bunkerNum*BUNKER_SQUARE_LENGTH) + (segmentNumRow) * BUNKER_COUNT + segmentNumCol;
			int erosionState = getErosionDegree(segmentNum);

			// Erode the specified bunker
			erodeBunker(erosionState, bunkerNum, segmentNumRow, segmentNumCol);

			// Disable alien bullet
			disableBullet(i);
			return false;
		}
	}
	return true;
}



// Update the locations of all alien bullets.
// This generally means moving the bullets down by two pixels.
// However, it also erases the bullets when they reach the bottom line.
void updateBullets() {
	int i;
	for (i=0; i<BULLET_COUNT; i++) {
		if (getAlienBullet(i).is_in_flight) {
			//drawTBullet0(getAlienBullet(i), true);
			int isHit = checkAlienBulletHits(i);
			clearAlienBullet(false, getAlienBullet(i));
			shiftAlienBullet(i);
			if (getAlienBullet(i).point.y < 430 && isHit) {
				incrementBulletStage(i);
				if (getAlienBullet(i).type == T_type) {
					switch(getAlienBullet(i).bullet_stage) {
					case (BULLET_STAGE_0):
						drawTBullet0(getAlienBullet(i), false);
						break;
					case (BULLET_STAGE_1):
						drawTBullet1(getAlienBullet(i), false);
						break;
					case (BULLET_STAGE_2):
						drawTBullet2(getAlienBullet(i), false);
						break;
					default:
						break;
					}
				} else {
					switch(getAlienBullet(i).bullet_stage) {
					case (BULLET_STAGE_0):
						drawSBullet0(getAlienBullet(i), false);
						break;
					case (BULLET_STAGE_1):
						drawSBullet1(getAlienBullet(i), false);
						break;
					case (BULLET_STAGE_2):
						drawSBullet2(getAlienBullet(i), false);
						break;
					case (BULLET_STAGE_3):
						drawSBullet3(getAlienBullet(i), false);
						break;
					default:
						break;
					}
				}
			} else {
				disableBullet(i);
			}
		}
	}
}
void clearBullet() {
	int row;
	int rowPixel = getTankBulletPosition().y;
	for (row = rowPixel-BULLET_PIXEL_HEIGHT; row < rowPixel; row++){
		framePointer0[(row)*pixelWidth + getTankBulletPosition().x] = BLACK;
		framePointer0[(row)*pixelWidth + getTankBulletPosition().x-1] = BLACK;
	}
}

void destroyAlien(int rowNum, int colNum) {

	int row;
	int col;
	int startRow = getAlienBlockPosition().y + (rowNum*totalAlienHeight);
	int startCol = getAlienBlockPosition().x + (colNum*totalAlienWidth);
	point_t deadPos;
	deadPos.x = startCol;
	deadPos.y = startRow;
	setOldAlienPos(deadPos);
	eraseAlienSpot();
	for (row = startRow; row < startRow+totalAlienHeight; row++) {
		for (col = startCol; col < startCol+totalAlienWidth; col++) {
			if ((alien_explosion_12x10[(row - startRow)/scalingFactor] & (1<<((col-startCol)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = BULLET_WHITE;
			}
		}
	}
}


// Draw a letter. This is used to display the Score and Lives
void drawLetter(bool reset, int Color, int start_row, int start_col, const int array[]){
	int row;
	int col;
	for (row = start_row; row < start_row + LETER_WIDTH; row++){
		for (col = start_col; col < start_col + LETTER_HEIGHT; col++){
			if (reset || (array[(row - start_row)/scalingFactor] & (1<<((col-start_col)/scalingFactor))) == 0){
				framePointer0[row*pixelWidth + col] = BLACK;
			} else {
				framePointer0[row*pixelWidth + col] = Color;
			}
		}
	}
}

#define ONE_DIGIT 1
#define TWO_DIGITS 10
#define THREE_DIGITS 100
#define FOUR_DIGITS 1000

#define STATS_START_ROW 10
#define STATS_START_COL 20
#define KERNING 15
#define KERNING_SMALL 5
#define TANK_KERNING (TANK_WIDTH) + (10)
#define KERNING_CENTRE 300

void displaySaucerBonus(bool reset){
	int startRow = getSaucerPos().y;
	int startCol = getSaucerPos().x;
	if (startCol < 60)
		startCol = 60;
	if (startCol > 580)
		startCol = 580;
	int NumColor = WHITE;
	int i ;
	int scoreIncrease = getSaucerBonus();
	if (scoreIncrease < TWO_DIGITS)
		i = 1;
	else if (scoreIncrease < THREE_DIGITS)
		i = 2;
	else if (scoreIncrease < FOUR_DIGITS)
		i = 3;
	else
		i = 4;
	int iter = 0;
	for (iter = 0; iter < i; iter++){
		int temp = 0;
		temp = scoreIncrease % 10;
		scoreIncrease /= 10;
		drawLetter(reset, NumColor, startRow, startCol, NumArray[temp]);
		startCol -= KERNING;
	}
}

void flashTank(bool reset, bool isFirst){
	int startRow = TANK_ROW_START;
	int startCol = getTankPositionGlobal();
	int tankStop = TANK_ROW_STOP;
	int stopCol = startCol + TANK_WIDTH;
	int row, col;
	for (row = startRow; row < tankStop; row++) {
		for (col = startCol; col < stopCol; col++) {
			if (isFirst){
				if (reset || (tank_smoulder1_15x8[(row - startRow)/scalingFactor] & (1<<((col-startCol)/scalingFactor))) == 0) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = GREEN;
				}
			}
			else{
				if (reset || (tank_smoulder2_15x8[(row - startRow)/scalingFactor] & (1<<((col-startCol)/scalingFactor))) == 0) {
					framePointer0[row*pixelWidth + col] = BLACK;
				} else {
					framePointer0[row*pixelWidth + col] = GREEN;
				}
			}

		}
	}
}

void checkHits() {
	int columnCount = ALIEN_COLUMNS;
	short bullet_x = getTankBulletPosition().x;
	short bullet_y = getTankBulletPosition().y-12;	// NOTE: CHANGED FROM 12 to 10!!!
	unsigned int alienColor = WHITE;
	unsigned int saucerColor = RED;
	unsigned int bunkerColor = GREEN;
	unsigned int temp = framePointer0[(bullet_y * pixelWidth) + bullet_x];
	//xil_printf("color: 0x%x   temp: 0x%x\n\r", color, temp);
	// The bullet found that the next pixel is WHITE, ie the bullet hit an alien.
	if (temp == alienColor) {
		// the bullet
		clearBullet();
		setBulletStatus(false);
		// Now we must find which alien was hit...
		int alienBlock_x = (int)getAlienBlockPosition().x;
		int alienBlock_y = (int)getAlienBlockPosition().y;
		int hit_alienCol = (bullet_x - alienBlock_x)/totalAlienWidth;
		int hit_alienRow = (bullet_y - alienBlock_y)/totalAlienHeight;
		setDeadAlien((hit_alienRow * columnCount) + hit_alienCol);
		killAlien((unsigned int)getDeadAlien());
		destroyAlien(hit_alienRow, hit_alienCol);
		resetAlienExplosionCount();
	}
	if (temp == saucerColor) {
		clearBullet();
		setBulletStatus(false);
		setSaucerHighFlag(1);
		drawSaucer(true);
		// Calculate score
		int randomMultiplier = rand() % SAUCER_POINTS_VALUE_COUNT;
		if (randomMultiplier == 0)
			randomMultiplier = 1;
		int scoreIncrease = randomMultiplier * SAUCER_POINTS_MULTIPLIER;
		setScore(getScore() + scoreIncrease);
		updateScore();
		setSaucerBonus(scoreIncrease);
		setSaucerDirection(SAUCER_INACTIVE);
	}
	if (temp == bunkerColor) {
		// find the bunker piece that needs to be eroded
		clearBullet();
		setBulletStatus(false);
		int segmentNumRow, segmentNumCol;
		int bunkerNum;
		int bulletX = getTankBulletPosition().x;
		int bulletY = getTankBulletPosition().y;
		if (bulletX < 160){
			bunkerNum = BUNKER_0;
			segmentNumCol = findSegNumCol(bulletX, 80);
			segmentNumRow = findSegNumRow(bulletY, true);
		}
		else if (bulletX < 320){
			bunkerNum = BUNKER_1;
			segmentNumCol = findSegNumCol(bulletX, 240);
			segmentNumRow = findSegNumRow(bulletY, true);
		}
		else if (bulletX < 480){
			bunkerNum = BUNKER_2;
			segmentNumCol = findSegNumCol(bulletX, 400);
			segmentNumRow = findSegNumRow(bulletY, true);
		}
		else{
			bunkerNum = BUNKER_3;
			segmentNumCol = findSegNumCol(bulletX, 560);
			segmentNumRow = findSegNumRow(bulletY, true);
		}

		int segmentNum = (bunkerNum*BUNKER_SQUARE_LENGTH) + (segmentNumRow) * BUNKER_COUNT + segmentNumCol;
		// Check current Erosion state
		int erosionState = getErosionDegree(segmentNum);
		erodeBunker(erosionState, bunkerNum, segmentNumRow, segmentNumCol);
	}
}

// Draw the tank bullet on the screen.
void drawTankBullet(bool reset){
	int row;
	for (row = getTankBulletPosition().y-BULLET_PIXEL_HEIGHT; row < getTankBulletPosition().y; row++) {
		if (reset) {
			framePointer0[(row+3)*pixelWidth + getTankBulletPosition().x] = BLACK;
			framePointer0[(row+3)*pixelWidth + getTankBulletPosition().x-1] = BLACK;
			framePointer0[(row)*pixelWidth + getTankBulletPosition().x] = BULLET_WHITE;
			framePointer0[(row)*pixelWidth + getTankBulletPosition().x-1] = BULLET_WHITE;
		} else {
			framePointer0[row*pixelWidth + getTankBulletPosition().x] = BULLET_WHITE;
			framePointer0[row*pixelWidth + getTankBulletPosition().x-1] = BULLET_WHITE;

		}
	}
	if (getBulletStatus()){
		if (getTankBulletPosition().y < TANK_BULLET_MIN || getTankBulletPosition().y > TANK_BULLET_MAX){
			// Blank the bullet
			for (row = getTankBulletPosition().y-BULLET_PIXEL_HEIGHT ; row < getTankBulletPosition().y; row++){
				framePointer0[(row)*pixelWidth + getTankBulletPosition().x] = BLACK;
				framePointer0[(row)*pixelWidth + getTankBulletPosition().x-1] = BLACK;
			}
			setBulletStatus(false);
		}
	}
}



#define SCORE_START_COL 170

void updateScore() {
	int startRow = STATS_START_ROW;
	int startCol = SCORE_START_COL;
	int NumColor = GREEN;
	unsigned int score = getScore();
	int i ;
	if (score < TWO_DIGITS)
		i = 1;
	else if (score < THREE_DIGITS)
		i = 2;
	else if (score < FOUR_DIGITS)
		i = 3;
	else
		i = 4;
	int iter = 0;
	for (iter = 0; iter < i; iter++){
		int temp = 0;
		temp = score % TWO_DIGITS;
		score /= TWO_DIGITS;
		drawLetter(false, NumColor, startRow, startCol, NumArray[temp]);
		startCol -= KERNING;
	}
}



// Draw the stats (score and lives) on the screen.
void drawStats(){
	int startRow = STATS_START_ROW;
	int startCol = STATS_START_COL;
	int letterColor = WHITE;
	// Draw the Score
	drawLetter(false, letterColor, startRow, startCol, S_6x5); // Draw S
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, C_6x5); // Draw C
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, O_6x5); // Draw O
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, R_6x5); // Draw R
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, E_6x5); // Draw E
	startCol = startCol + KERNING + KERNING;
	updateScore();
	startCol += KERNING_CENTRE;

	// Draw the Lives
	drawLetter(false, letterColor, startRow, startCol, L_6x5); // Draw L
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, I_6x5); // Draw I
	startCol += KERNING_SMALL;
	drawLetter(false, letterColor, startRow, startCol, V_6x5); // Draw V
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, E_6x5); // Draw E
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, S_6x5); // Draw S
	startCol = startCol + KERNING + KERNING;
	startRow -= KERNING_SMALL;
	drawTank(true, startRow, startCol);
	startCol += TANK_KERNING;
	drawTank(true, startRow, startCol);
	startCol += TANK_KERNING;
	drawTank(true, startRow, startCol);
	setInit(false);


}

#define GAME_OVER_START_ROW 200
#define GAME_OVER_START_COL 240

void drawGameOver(){
	int startRow = GAME_OVER_START_ROW;
	int startCol = GAME_OVER_START_COL;
	int letterColor = RED;
	drawLetter(false, letterColor, startRow, startCol, G_6x5); // Draw G
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, A_6x5); // Draw A
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, M_6x5); // Draw M
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, E_6x5); // Draw E
	startCol = startCol + KERNING + KERNING;

	drawLetter(false, letterColor, startRow, startCol, O_6x5); // Draw O
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, V_6x5); // Draw V
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, E_6x5); // Draw E
	startCol += KERNING;
	drawLetter(false, letterColor, startRow, startCol, R_6x5); // Draw R
}

// Render the screen.
void render() {
	initAliveAliens();
	drawAliens(framePointer0);
	drawTank(false, 0, 0);
	drawBunkers(framePointer0);
	drawStats(framePointer0);
}

void render_init(unsigned int * fp) {
	framePointer0 = fp;
}
