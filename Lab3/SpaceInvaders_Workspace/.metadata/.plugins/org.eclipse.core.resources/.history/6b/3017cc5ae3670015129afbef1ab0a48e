// Demonstrates one way to handle globals safely in C.
#include "globals.h"

#define LEFT 0;
#define RIGHT 1;

// Here are the globals.
static unsigned short tankPosition;
static point_t tankBulletPosition;
static point_t alienBlockPosition;
static bool aliveAliens[55] = { 1 };
static bool legsOut = true;
static bool tankBulletFired = false;
static bool aliensDirection = RIGHT;
static int erosionDegree = -1;
static int farthestRightAlienColumn = 10;
static int farthestLeftAlienColumn = 0;
static int bottomRowAliens[11] = {45,46,47,48,49,50,51,52,53,54};


int getFarthestRightAlienColumn() {
	return farthestRightAlienColumn;
}

int getFarthestLeftAlienColumn() {
	return farthestLeftAlienColumn;
}

void switchAliensDirection() {
	aliensDirection = !aliensDirection;
}

bool getAliensDirection() {
	return aliensDirection;
}

// Here are the accessors.
void setTankPositionGlobal(unsigned short val) {
  tankPosition = val;
}

bool getBulletStatus(){
	return tankBulletFired;
}

void setBulletStatus(bool newStatus){
	tankBulletFired = newStatus;
}

int getErosionDegree(){
	return erosionDegree;
}

void setErosionDegree(int newDegree){
	erosionDegree = newDegree;
}

unsigned short getTankPositionGlobal() {
  return tankPosition;
}

void initAliveAliens() {
	int i=0;
	for (i=0; i<55; i++) {
		aliveAliens[i] = 1;
	}
	alienBlockPosition.x = 40;
	alienBlockPosition.y = 60;
}

point_t getAlienBlockPosition() {
	return alienBlockPosition;
}

bool getAliveAlien(unsigned int i){
	return aliveAliens[i];
}

void killAlien(unsigned int i){
	aliveAliens[i] = false;

	bool farthestLeftAlienUnchanged = false;
	int col;
	int row;
	for (col=farthestLeftAlienColumn; col<11; col++) {
		for (row=0; row<5; row++) {
			if (aliveAliens[(row*11) + col]) {
				farthestLeftAlienUnchanged = true;
				row=11; col=5; break;
			}
		}
	}
	if (!farthestLeftAlienUnchanged) {
		farthestLeftAlienColumn++;
		xil_printf("new far left column at %d", farthestLeftAlienColumn);

	}
	bool farthestRightAlienUnchanged = false;
	for (col=0; col<11; col++) {
		for (row=farthestRightAlienColumn; row<55; row = row + 11) {
			if (aliveAliens[row]) {
				farthestRightAlienUnchanged = true;
				row=55; col=11; break;
			}
		}
	}
	if (!farthestRightAlienUnchanged) {
		farthestRightAlienColumn--;
		xil_printf("new far right column at %d", farthestRightAlienColumn);
	}
}

void switchLegsOut() {
	legsOut = !legsOut;
}

bool getLegsOut() {
	return legsOut;
}

void setAlienBlockPosition(unsigned int x, unsigned int y) {
	alienBlockPosition.x = x;
	alienBlockPosition.y = y;
}

void setTankBulletPosition(point_t val) {
  tankBulletPosition.x = val.x;
  tankBulletPosition.y = val.y;
}

point_t getTankBulletPosition() {
  return tankBulletPosition;
}
