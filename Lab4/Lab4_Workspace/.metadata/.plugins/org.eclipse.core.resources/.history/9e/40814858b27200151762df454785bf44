/*
 * clock.c
 *
 *  Created on: Sep 11, 2015
 *      Author: superman
 */

#include "render.h"
#include "globals.h"
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.

#define MAX_TIME 86400				// Corresponds to time 24:00:00, which rolls over to 00:00:00.
#define SECONDS_IN_HOUR 3600		// There are 3600 seconds in an hour.
#define SECONDS_IN_MINUTE 60		// There are 60 seconds in a minute.
#define TICKS_PER_SECOND 100		// There are 100 FIT ticks per seconds.
#define BUTTON_DEBOUNCE_WAIT 4		// Wait 4 FIT ticks (40ms) for a button debounce.
#define TANK_BORDER_RIGHT 600
#define TANK_BORDER_LEFT 10

// These correspond to the numerical values of the buttons:
#define MINUTES_BUTTON 1
#define SECONDS_BUTTON 2
#define DOWN_BUTTON 4
#define HOURS_BUTTON 8
#define UP_BUTTON 16

#define MOVE_TANK_LEFT 8;
#define MOVE_TANK_RIGHT 2;
#define TANK_FIRE 1;

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.

// The program uses the following counters.
// The counters are all initialized to 0.
static u32 fit_timer_count = 0;
static u32 debounce_timer_count = 0;
static u32 auto_inc_timer_count = 0;
static u32 alien_fire_count = 0;
static u32 currentButtonState = 0;
static s32 cumulative_seconds = 0;
static u32 alienBulletTicks = 500;


// This updates the display of the clock on the screen.
void updateTiming(){
	// First it checks for rollover and rollunder.
	if (cumulative_seconds >= MAX_TIME)		// cumulative_seconds exceeds 23:59:59.
		cumulative_seconds -= MAX_TIME;		// Decrease cumulative_seconds by 1 full day.
	else if (cumulative_seconds < 0)		// cumulative_seconds is below 00:00:00.
		cumulative_seconds += MAX_TIME;		// Increase cumulative_seconds by 1 full day.
	u32 hours = cumulative_seconds/SECONDS_IN_HOUR;							// Compute how many hours are in cumulative_seconds.
	u32 minutes = (cumulative_seconds%SECONDS_IN_HOUR)/SECONDS_IN_MINUTE;	// Compute how many minutes are remaining.
	u32 seconds = (cumulative_seconds%SECONDS_IN_HOUR)%SECONDS_IN_MINUTE;	// Compute how many seconds are remaining.
	xil_printf("\r%02d:%02d:%02d", hours, minutes, seconds);				// Carriage Return to overwrite old clock value.
}

// This changes the time on the clock based on the button values pressed
void setClock() {
	// Update the value of cumulative_seconds based on the buttons pressed.
	// For example, pressing DOWN_BUTTON and SECONDS_BUTTON decrements cumulative_seconds by one.
	// Note that invalid button combinations are ignored.
	if (currentButtonState == DOWN_BUTTON + SECONDS_BUTTON)
		cumulative_seconds--;
	else if (currentButtonState == DOWN_BUTTON + MINUTES_BUTTON)
		cumulative_seconds -= SECONDS_IN_MINUTE;
	else if (currentButtonState == DOWN_BUTTON + HOURS_BUTTON)
		cumulative_seconds -= SECONDS_IN_HOUR;
	else if (currentButtonState == UP_BUTTON + SECONDS_BUTTON)
		cumulative_seconds++;
	else if (currentButtonState == UP_BUTTON + MINUTES_BUTTON)
		cumulative_seconds += SECONDS_IN_MINUTE;
	else if (currentButtonState == UP_BUTTON + HOURS_BUTTON)
		cumulative_seconds += SECONDS_IN_HOUR;
	// Once the value of cumulative_seconds has been modified, display the change on the clock.
	updateTiming();
}


void alienBulletsUpdate() {
	alien_fire_count++;
	if (alien_fire_count >= alienBulletTicks) {
		// fire a bullet
		alien_fire_count = 0;
		alienBulletTicks = rand()%300;
		alienFire();
	}

}

// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {
	// Increment the following counters:
	fit_timer_count++;
	debounce_timer_count++;
	auto_inc_timer_count++;

	alienBulletsUpdate();

	int rightVal = MOVE_TANK_RIGHT;
	int leftVal = MOVE_TANK_LEFT;
	int fire = TANK_FIRE;
	// This waits the given amount of time, so that button presses can be properly debounced.
	if (debounce_timer_count >= BUTTON_DEBOUNCE_WAIT) {
		if ((currentButtonState == leftVal || currentButtonState == leftVal + fire) && getTankPositionGlobal() >= TANK_BORDER_LEFT){
			setTankPositionGlobal(getTankPositionGlobal() - 5);
			drawTank(false, 0, 0);
		}
		else if ((currentButtonState == rightVal || currentButtonState == rightVal + fire) && getTankPositionGlobal() <= TANK_BORDER_RIGHT){
			setTankPositionGlobal(getTankPositionGlobal() + 5);
			drawTank(false, 0, 0);
		}
		if (!getBulletStatus() && (currentButtonState == fire || currentButtonState == rightVal + fire || currentButtonState == leftVal + fire)){
			xil_printf("tank bullet fired\n\r");
			setBulletStatus(true);
			point_t bullet;
			bullet.x = getTankPositionGlobal() + 15;
			bullet.y = 410;
			setTankBulletPosition(bullet);
			drawTankBullet(false);
		}
		debounce_timer_count = 0;
	}

	point_t tank_bullet;
	 if (getBulletStatus()) {
		 tank_bullet.x = getTankBulletPosition().x;
		 tank_bullet.y = getTankBulletPosition().y-3;
		 checkHits();
	 }
	 setTankBulletPosition(tank_bullet);
	 drawTankBullet(true);
	 updateBullets();

	// The following block checks to see if a button press has lasted for 1 second or more.
	// If it has, then it will update the clock at a rate of twice per second, given the buttons are still pressed.
	if (auto_inc_timer_count >= TICKS_PER_SECOND/2) {		// auto_inc_timer_count has reached 50ms.
		if (auto_inc_timer_count >= TICKS_PER_SECOND) {		// auto_inc_timer_count has reached 100ms.
			if (currentButtonState != 0) {					// At least one button is pressed.
				//setClock();									// Set the clock based on the button values.
				// Reset auto_inc_timer_count to 50.
				// Thus once auto_inc_timer_count has waited 1 second, the following code will then execute every half second.
				auto_inc_timer_count = TICKS_PER_SECOND/2;
			}
			else
				auto_inc_timer_count = 0;
		}
	}
	// This waits a full second in FIT ticks, and updates cumulative seconds if there are no button presses.
	if (fit_timer_count >= getAlienTicks()) {
		drawAliens();
		fit_timer_count = 0;			// Reset the counter.
	}



	// If there are no button presses, do not try to debounce a button.
	// This means the debounce_timer_count needs to be reset.
	if (!currentButtonState) {
		debounce_timer_count = 0;
	}
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
	// Clear the GPIO interrupt.
	XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
	// You need to do something here.
	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
	XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
	// Because there is a change in the button state, the button counters need to be reinitialized.
	debounce_timer_count = 0;
	auto_inc_timer_count = 0;
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler();
	}
}

int interruptManager (unsigned int * framePointer0) {
	init_platform();
	// Initialize the GPIO peripherals.
	int success;
	print("Real-Time Clock\n\r");
	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();

	while(1); // Program never ends.

	cleanup_platform();

	return 0;
}
