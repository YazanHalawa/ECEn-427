/*
 * clock.c
 *
 *  Created on: Sep 11, 2015
 *      Author: superman
 */

#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include "render.h"

#define MAX_TIME 86400				// Corresponds to time 24:00:00, which rolls over to 00:00:00.
#define SECONDS_IN_HOUR 3600		// There are 3600 seconds in an hour.
#define SECONDS_IN_MINUTE 60		// There are 60 seconds in a minute.
#define TICKS_PER_SECOND 100		// There are 100 FIT ticks per seconds.
#define BUTTON_DEBOUNCE_WAIT 4		// Wait 4 FIT ticks (40ms) for a button debounce.

// These correspond to the numerical values of the buttons:
#define MINUTES_BUTTON 1
#define SECONDS_BUTTON 2
#define DOWN_BUTTON 4
#define HOURS_BUTTON 8
#define UP_BUTTON 16

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.

// The program uses the following counters.
// The counters are all initialized to 0.
static u32 fit_timer_count = 0;
static u32 debounce_timer_count = 0;
static u32 auto_inc_timer_count = 0;
static u32 currentButtonState = 0;

// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler(unsigned int * framePointer0) {
	// Increment the following counters:
	fit_timer_count++;
	debounce_timer_count++;
	auto_inc_timer_count++;


	if (fit_timer_count >= 100) {
		xil_printf("made it to timer reset\n\r");
		fit_timer_count = 0;
		drawAliens(framePointer0);
	}

	// This waits the given amount of time, so that button presses can be properly debounced.
	if (debounce_timer_count == BUTTON_DEBOUNCE_WAIT) {

	}
	// If there are no button presses, do not try to debounce a button.
	// This means the debounce_timer_count needs to be reset.
	if (!currentButtonState) {
		debounce_timer_count = 0;
	}
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler(unsigned int * framePointer0) {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // You need to do something here.
  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
  // Because there is a change in the button state, the button counters need to be reinitialized.
  debounce_timer_count = 0;
  auto_inc_timer_count = 0;
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr, unsigned int * framePointer0) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler(framePointer0);
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler(framePointer0);
	}
}

int interruptManager (unsigned int * framePointer0) {
    init_platform();
    // Initialize the GPIO peripherals.
    int success;
   // print("Real-Time Clock\n\r");
    success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
    // Set the push button peripheral to be inputs.
    XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
    // Enable the global GPIO interrupt for push buttons.
    XGpio_InterruptGlobalEnable(&gpPB);
    // Enable all interrupts in the push button peripheral.
    XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

    microblaze_register_handler(interrupt_handler_dispatcher, void * NULL);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
    		(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
    microblaze_enable_interrupts();

    while(1); // Program never ends.

    cleanup_platform();

    return 0;
}
